# order features by matching top 20 between models:
comparetabForFigure$order = ifelse(comparetabForFigure$rank<=20 & comparetabForFigure$RFrank<=20, 1,
ifelse(comparetabForFigure$rank<=20 & comparetabForFigure$RFrank>20, 2,
ifelse(comparetabForFigure$rank>20 & comparetabForFigure$RFrank<=20, 3,
ifelse(comparetabForFigure$rank>20 & comparetabForFigure$RFrank>20, 4, 5))))
comparetabForFigure = comparetabForFigure[order(comparetabForFigure$order),]
# compareTabForHeatmap = comparetabForFigure[,c("rank", "RFrank", "log2FoldChange")]
compareTabForHeatmap = comparetabForFigure[,c("NBCbin", "RFbin", "log2FoldChange")]
# compareTabForHeatmap = compareTabForHeatmap[order(compareTabForHeatmap$log2FoldChange),]
heatmap(as.matrix(compareTabForHeatmap), Colv = NA, Rowv = NA) #Colv = NA, Rowv = NA gets rid of clustering order
data.frame(taxaTable)[data.frame(taxaTable)$Species == "eubacterium_rectale",] # which asv did Andy want?
data.frame(taxaTable)[data.frame(taxaTable)$Species == "bacteroides_uniformis",] # which asv did Andy want?
compareTabForHeatmapRanksScaled = compareTabForHeatmap[,1:2]
taxa_level_col_numbers <- rowSums(taxaTable[row.names(compareTabForHeatmapRanksScaled),] != "")
bugnames=c()
for (i in 1:length(row.names(compareTabForHeatmapRanksScaled))) {
# print(i)
asv=names(taxa_level_col_numbers[i])
# print(asv)
asv_name = paste0(taxaTable[asv, as.integer(taxa_level_col_numbers[i])], " (", asv, ")")
# print(asv_name)
bugnames = c(bugnames, asv_name)
# return(bugnames)
}
bugnames
# compareTabForHeatmapRanksScaled$bugnames = bugnames
row.names(compareTabForHeatmapRanksScaled) <- bugnames
colMain <- colorRampPalette(brewer.pal(9, "Blues"))(max(compareTabForHeatmap)) # need number of ASVs used in both RF and NBC (392)
# PuBuGn
# Blues
# GnBu
# colMain <- colorRampPalette(brewer.pal(8, "Greens"))(max(compareTabForHeatmap)) # need number of ASVs used in both RF and NBC (392)
plot(rep(1,dim(compareTabForHeatmap)[1]),col=colMain[compareTabForHeatmapRanksScaled$NBC],pch=19,cex=3) # check colors
# custom ranks gradient:
colMain2 <- colorRampPalette(c("royalblue4", "lightblue", "white", "tomato","red4"))
my_group <- as.numeric(as.factor(compareTabForHeatmapRanksScaled$NBC)) # negative is asthmatic
colSide <- colMain2(length(my_group))[my_group]
plot(rep(1,length(my_group)),col=colSide,pch=19,cex=3) # check colors
library(gplots)
library(RColorBrewer)
library(binovisualfields)
heatmap.2(as.matrix(as.matrix(compareTabForHeatmapRanksScaled)),
Colv = NA, Rowv = NA,  #Colv = NA, Rowv = NA gets rid of clustering order
dendrogram='none' ,
scale = "none",
xlab = "Model",
margins=c(10,8),
cexRow = 0.5, #label size
cexCol = 2, #label size
# labCol="",
trace = "none",
density.info = "none",
# srt=30, # I think this only works with heatmap.2()
# add.expr = text(x = seq_along(colnames(compareTabForHeatmapRanks)), y=-0.2, srt=45,
# labels=colnames(compareTabForHeatmapRanks), xpd=TRUE, cex = 2),
# RowSideColors=colSide,  # this is the l2fc part
col=colMain)   # colors for ranks
# Trying to add a legend for the l2fc:
# f = factor(round(compareTabForHeatmap$log2FoldChange,1))
# mycol = brewer.pal(8, "Blues")
# legend(x=0.8,
#        legend=levels(f),
#        col=colSide,
#        pch=15,
#        y = 1.4,
#        horiz = FALSE)
# Make a legend to add in Affinity:
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
plot(1:length(my_group), 1:length(my_group), pch = 19, cex=2, col = colfunc(length(my_group)))
legend_image <- as.raster(matrix(colfunc(length(my_group)), ncol=1))
plot(c(0,2),c(0,1),type = 'n', axes = F,xlab = '', ylab = '', main = 'L2FC (DESEQ2)')
text(x=1.5, y = seq(0,1, l=length(my_group)),
# max(compareTabForHeatmap$log2FoldChange),l=length(my_group)),
labels = round(seq(max(compareTabForHeatmap$log2FoldChange),
min(compareTabForHeatmap$log2FoldChange),l=length(my_group)), 0))
rasterImage(legend_image, 0, 0, 1, 1)
# Ranks/Blues homemade legend (the default is not opening in affinity :( )
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
plot(1:length(compareTabForHeatmap$RFrank), 1:length(compareTabForHeatmap$RFrank),
pch = 19, cex=2, col = colMain[compareTabForHeatmap$RFrank])
legend_image <- as.raster(matrix(colMain, ncol=1))
plot(c(0,2),c(0,1),type = 'n', axes = F,xlab = '', ylab = '', main = 'L2FC (DESEQ2)')
text(x=1.5, y = seq(0,1, l=length(my_group)),
labels = round(seq(max(compareTabForHeatmap$RFrank),
min(compareTabForHeatmap$RFrank),l=length(my_group)), 0))
asthma_color_hex = "#DE4968FF"
healthy_color_hex = "#51127CFF"
toplistNBC = readRDS(paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/featureAUCsForHist.rds"))
deseqtab = read.table("DeSEQ_results_for_CrossComparisonWithNBC.txt") # info also available in Supplementary Tables
comparetab = toplistNBC[as.character(deseqtab$asvs),]
comparetab$comparison = deseqtab$comparison
comparetab$log2FoldChange = deseqtab$log2FoldChange
comparetab$padj = deseqtab$padj
# saveRDS(comparetab, file = paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/DESEQ2ASVvsNBCRANK.rds"))
DESEQ_l2fc_table = read.table(file = "deseq2_all_results_asthma.txt") # info also available in Supplementary Tables
#load RF importance
randomForest16S_md7_392NBCfeatures_meanDecreaseAcc=readRDS("randomForest16S_md7_392NBCfeatures_meanDecreaseAcc.rds")
randomForest16S_md7_392NBCfeatures_meanDecreaseAcc = data.frame(randomForest16S_md7_392NBCfeatures_meanDecreaseAcc)
randomForest16S_md7_392NBCfeatures_meanDecreaseAcc = randomForest16S_md7_392NBCfeatures_meanDecreaseAcc[order(randomForest16S_md7_392NBCfeatures_meanDecreaseAcc$MeanDecreaseAccuracy, decreasing = TRUE),]
randomForest16S_md7_392NBCfeatures_meanDecreaseAcc$RFrank = seq(1, dim(randomForest16S_md7_392NBCfeatures_meanDecreaseAcc)[1], 1)
taxaTable = readRDS(file = "taxonomyTable.rds") # info available in supplementary tables
taxaTable[comparetab[comparetab$comparison == "asthma","ASV"],]
asvs_for_figure = c(row.names(toplistNBC[order(toplistNBC$rank),][1:20,]), # top 20 nbc
row.names(randomForest16S_md7_392NBCfeatures_meanDecreaseAcc[order(randomForest16S_md7_392NBCfeatures_meanDecreaseAcc$RFrank),][1:20,]) # top 20 rf
)
asvs_for_figure = unique(asvs_for_figure)
comparetabForFigure = toplistNBC[as.character(asvs_for_figure),]
comparetabForFigure$log2FoldChange = DESEQ_l2fc_table[row.names(comparetabForFigure), "log2FoldChange"]
comparetabForFigure$padj = DESEQ_l2fc_table[row.names(comparetabForFigure), "padj"]
comparetabForFigure$RFrank = randomForest16S_md7_392NBCfeatures_meanDecreaseAcc[row.names(comparetabForFigure), "RFrank"]
comparetabForFigure$mda = randomForest16S_md7_392NBCfeatures_meanDecreaseAcc[row.names(comparetabForFigure), "MeanDecreaseAccuracy"]
comparetabForFigure$RFrank = randomForest16S_md7_392NBCfeatures_meanDecreaseAcc[row.names(comparetabForFigure), "RFrank"]
comparetabForFigure$Species = data.frame(taxaTable)[row.names(comparetabForFigure), "Species"]
comparetabForFigure$Genus = data.frame(taxaTable)[row.names(comparetabForFigure), "Genus"]
# comparetabForFigure$Family = data.frame(taxaTable)[row.names(comparetabForFigure), "Family"]
# decades:
# comparetabForFigure$NBCbin = floor(comparetabForFigure$rank/10)
# comparetabForFigure$RFbin = floor(comparetabForFigure$RFrank/10)
# percentage groups (5, 10, 25, 50)
comparetabForFigure$NBCbin = ifelse(floor(100*comparetabForFigure$rank/392) <= 1, 5,
ifelse(floor(100*comparetabForFigure$rank/392) <= 5, 4,
# ifelse(floor(100*comparetabForFigure$rank/392) <= 10, 4,
ifelse(floor(100*comparetabForFigure$rank/392) <= 25, 3,
ifelse(floor(100*comparetabForFigure$rank/392) <= 50, 2, 1))))
comparetabForFigure$RFbin = ifelse(floor(100*comparetabForFigure$RFrank/392) <= 1, 5,
ifelse(floor(100*comparetabForFigure$RFrank/392) <= 5, 4,
# ifelse(floor(100*comparetabForFigure$RFrank/392) <= 10, 4,
ifelse(floor(100*comparetabForFigure$RFrank/392) <= 25, 3,
ifelse(floor(100*comparetabForFigure$RFrank/392) <= 50, 2, 1))))
# order features by matching top 20 between models:
comparetabForFigure$order = ifelse(comparetabForFigure$rank<=20 & comparetabForFigure$RFrank<=20, 1,
ifelse(comparetabForFigure$rank<=20 & comparetabForFigure$RFrank>20, 2,
ifelse(comparetabForFigure$rank>20 & comparetabForFigure$RFrank<=20, 3,
ifelse(comparetabForFigure$rank>20 & comparetabForFigure$RFrank>20, 4, 5))))
comparetabForFigure = comparetabForFigure[order(comparetabForFigure$order),]
# compareTabForHeatmap = comparetabForFigure[,c("rank", "RFrank", "log2FoldChange")]
compareTabForHeatmap = comparetabForFigure[,c("NBCbin", "RFbin", "log2FoldChange")]
# compareTabForHeatmap = compareTabForHeatmap[order(compareTabForHeatmap$log2FoldChange),]
heatmap(as.matrix(compareTabForHeatmap), Colv = NA, Rowv = NA) #Colv = NA, Rowv = NA gets rid of clustering order
compareTabForHeatmap
data.frame(taxaTable)[data.frame(taxaTable)$Species == "eubacterium_rectale",]
data.frame(taxaTable)[data.frame(taxaTable)$Species == "eubacterium_rectale",]
compareTabForHeatmapRanksScaled = compareTabForHeatmap[,1:2]
taxa_level_col_numbers <- rowSums(taxaTable[row.names(compareTabForHeatmapRanksScaled),] != "")
bugnames=c()
for (i in 1:length(row.names(compareTabForHeatmapRanksScaled))) {
# print(i)
asv=names(taxa_level_col_numbers[i])
# print(asv)
asv_name = paste0(taxaTable[asv, as.integer(taxa_level_col_numbers[i])], " (", asv, ")")
# print(asv_name)
bugnames = c(bugnames, asv_name)
# return(bugnames)
}
bugnames
# compareTabForHeatmapRanksScaled$bugnames = bugnames
row.names(compareTabForHeatmapRanksScaled) <- bugnames
colMain <- colorRampPalette(brewer.pal(9, "Blues"))(max(compareTabForHeatmap)) # need number of ASVs used in both RF and NBC (392)
# PuBuGn
# Blues
# GnBu
# colMain <- colorRampPalette(brewer.pal(8, "Greens"))(max(compareTabForHeatmap)) # need number of ASVs used in both RF and NBC (392)
plot(rep(1,dim(compareTabForHeatmap)[1]),col=colMain[compareTabForHeatmapRanksScaled$NBC],pch=19,cex=3) # check colors
colMain2 <- colorRampPalette(c("royalblue4", "lightblue", "white", "tomato","red4"))
my_group <- as.numeric(as.factor(compareTabForHeatmapRanksScaled$NBC)) # negative is asthmatic
colSide <- colMain2(length(my_group))[my_group]
plot(rep(1,length(my_group)),col=colSide,pch=19,cex=3) # check colors
library(gplots)
library(RColorBrewer)
library(binovisualfields)
heatmap.2(as.matrix(as.matrix(compareTabForHeatmapRanksScaled)),
Colv = NA, Rowv = NA,  #Colv = NA, Rowv = NA gets rid of clustering order
dendrogram='none' ,
scale = "none",
xlab = "Model",
margins=c(10,8),
cexRow = 0.5, #label size
cexCol = 2, #label size
# labCol="",
trace = "none",
density.info = "none",
# srt=30, # I think this only works with heatmap.2()
# add.expr = text(x = seq_along(colnames(compareTabForHeatmapRanks)), y=-0.2, srt=45,
# labels=colnames(compareTabForHeatmapRanks), xpd=TRUE, cex = 2),
# RowSideColors=colSide,  # this is the l2fc part
col=colMain)   # colors for ranks
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
plot(1:length(my_group), 1:length(my_group), pch = 19, cex=2, col = colfunc(length(my_group)))
legend_image <- as.raster(matrix(colfunc(length(my_group)), ncol=1))
plot(c(0,2),c(0,1),type = 'n', axes = F,xlab = '', ylab = '', main = 'L2FC (DESEQ2)')
text(x=1.5, y = seq(0,1, l=length(my_group)),
# max(compareTabForHeatmap$log2FoldChange),l=length(my_group)),
labels = round(seq(max(compareTabForHeatmap$log2FoldChange),
min(compareTabForHeatmap$log2FoldChange),l=length(my_group)), 0))
rasterImage(legend_image, 0, 0, 1, 1)
layout(matrix(1:2,ncol=2), width = c(2,1),height = c(1,1))
plot(1:length(compareTabForHeatmap$RFrank), 1:length(compareTabForHeatmap$RFrank),
pch = 19, cex=2, col = colMain[compareTabForHeatmap$RFrank])
legend_image <- as.raster(matrix(colMain, ncol=1))
plot(c(0,2),c(0,1),type = 'n', axes = F,xlab = '', ylab = '', main = 'L2FC (DESEQ2)')
text(x=1.5, y = seq(0,1, l=length(my_group)),
labels = round(seq(max(compareTabForHeatmap$RFrank),
min(compareTabForHeatmap$RFrank),l=length(my_group)), 0))
rasterImage(legend_image, 0, 0, 1, 1)
library(RColorBrewer)
par(mar=c(3,4,2,2))
display.brewer.all()
rm(list = ls()[!ls() %in% c("ASVTABLE","my_asv_table","my_min_rel_abund", "my_minimum_detection", "outdirectory", "my_model", "my_output", "my_sample_data", "feature_aucs")])
#### "Concordance" Scores using ROC NB Score Thresholds #####
asvThresholds = readRDS(paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/ASV_Best_Thresholds.rds"))
countMatrixByROCThreshold <- getCountMatrixByROCThreshold(my_output, asvThresholds=asvThresholds)
saveRDS(countMatrixByROCThreshold, file = paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/countMatrixByROCThreshold.rds"))
rm(list = ls()[!ls() %in% c("ASVTABLE","my_asv_table","my_min_rel_abund", "my_minimum_detection", "outdirectory", "my_model", "my_output", "my_sample_data", "feature_aucs")])
feature_aucs = readRDS(file=paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/feature_aucs.rds"))
countMatrixByROCThreshold <- readRDS(file = paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/countMatrixByROCThreshold.rds"))
allASVs <- readRDS("/Users/naomiwilson/Box/Kau Lab/Results/MARS/16S_Analysis_AJH/updated_16S_021320/allASVs.rds")
humanSamples <- readRDS("/Users/naomiwilson/Box/Kau Lab/Results/MARS/16S_Analysis_AJH/updated_16S_021320/marsFecal16S.rds")
allHumanASVs <- allASVs[,rownames(humanSamples)]
allHumanASVs = apply(X = allHumanASVs, MARGIN = 2, FUN = function(x){x/sum(x)})
# tmp_topASVs = row.names(feature_aucs)[feature_aucs$feature_aucs > 0.6] # change threshold as you like
conc_matrix_list = get_concordance_matrices(perform_NBC_output = my_output,
sampleConcordanceMatrix=countMatrixByROCThreshold,
featureAUCsForConcordanceList=row.names(feature_aucs),
allHumanASVs = my_asv_table,
limit_of_detection = 0,
PWCtype = "proportion")
saveRDS(conc_matrix_list, file = paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/conc_matrix_list.rds"))
par(mfrow = c(1,1))
hist(as.matrix(conc_matrix_list[[1]]),
breaks = 20,
main=strwrap(paste0("Pairwise Concordance All A Against All H; ", length(row.names(feature_aucs)), " features; md=", my_minimum_detection), 25),
xlab = "Proportion of Concordant ASVs",
col = "darkgrey",
xlim = c(round(min(conc_matrix_list[[1]]), digits = 2), round(max(conc_matrix_list[[1]]), digits = 2)))
abline(v=conc_matrix_list[[1]]["MARS0043.F.16s", "MARS0022.F.16s"],
col=c("blue"), lty=2, lwd=3)
abline(v=conc_matrix_list[[1]]["MARS0033.F.16s", "MARS0034.F.16s"],
col=c("red"), lty=2, lwd=3)
# mean(conc_matrix_list[[1]])
# conc_matrix_list[[1]]["MARS0043.F.16s", "MARS0022.F.16s"]
allHumanASVs = readRDS("allASVs.rds")
allHumanASVs
readRDS("/Users/naomiwilson/Box/Kau Lab/Results/MARS/16S_Analysis_AJH/updated_16S_021320/forReviewers/massASVTable.rds")
readRDS("/Users/naomiwilson/Box/Kau Lab/Results/MARS/16S_Analysis_AJH/updated_16S_021320/marsFecal16S.rds")
sim(readRDS("/Users/naomiwilson/Box/Kau Lab/Results/MARS/16S_Analysis_AJH/updated_16S_021320/marsFecal16S.rds"))
dim(readRDS("/Users/naomiwilson/Box/Kau Lab/Results/MARS/16S_Analysis_AJH/updated_16S_021320/marsFecal16S.rds"))
dim(readRDS("/Users/naomiwilson/Box/Kau Lab/Results/MARS/16S_Analysis_AJH/updated_16S_021320/asv_table_for_NCB.rds"))
readRDS("/Users/naomiwilson/Box/Kau Lab/Results/MARS/16S_Analysis_AJH/updated_16S_021320/asv_table_for_NCB.rds")
feature_aucs = readRDS(file=paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/feature_aucs.rds"))
countMatrixByROCThreshold <- readRDS(file = paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/countMatrixByROCThreshold.rds"))
allASVs <- readRDS("/Users/naomiwilson/Box/Kau Lab/Results/MARS/16S_Analysis_AJH/updated_16S_021320/allASVs.rds")
humanSamples <- readRDS("/Users/naomiwilson/Box/Kau Lab/Results/MARS/16S_Analysis_AJH/updated_16S_021320/marsFecal16S.rds")
allHumanASVs <- allASVs[,rownames(humanSamples)]
allHumanASVs
saveRDS("allHumanASVs.rds")
View(allHumanASVs)
saveRDS(allHumanASVs, "allHumanASVs.rds")
rm(list = ls()[!ls() %in% c("ASVTABLE","my_asv_table","my_min_rel_abund", "my_minimum_detection", "outdirectory", "my_model", "my_output", "my_sample_data", "feature_aucs")])
feature_aucs = readRDS(file=paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/feature_aucs.rds"))
countMatrixByROCThreshold <- readRDS(file = paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/countMatrixByROCThreshold.rds"))
allHumanASVs = readRDS("allHumanASVs.rds")
allHumanASVs = apply(X = allHumanASVs, MARGIN = 2, FUN = function(x){x/sum(x)})
conc_matrix_list = get_concordance_matrices(perform_NBC_output = my_output,
sampleConcordanceMatrix=countMatrixByROCThreshold,
featureAUCsForConcordanceList=row.names(feature_aucs),
allHumanASVs = my_asv_table,
limit_of_detection = 0,
PWCtype = "proportion")
saveRDS(conc_matrix_list, file = paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/conc_matrix_list.rds"))
par(mfrow = c(1,1))
hist(as.matrix(conc_matrix_list[[1]]),
breaks = 20,
main=strwrap(paste0("Pairwise Concordance All A Against All H; ", length(row.names(feature_aucs)), " features; md=", my_minimum_detection), 25),
xlab = "Proportion of Concordant ASVs",
col = "darkgrey",
xlim = c(round(min(conc_matrix_list[[1]]), digits = 2), round(max(conc_matrix_list[[1]]), digits = 2)))
abline(v=conc_matrix_list[[1]]["MARS0043.F.16s", "MARS0022.F.16s"],
col=c("blue"), lty=2, lwd=3)
abline(v=conc_matrix_list[[1]]["MARS0033.F.16s", "MARS0034.F.16s"],
col=c("red"), lty=2, lwd=3)
# mean(conc_matrix_list[[1]])
# conc_matrix_list[[1]]["MARS0043.F.16s", "MARS0022.F.16s"]
rm(list = ls()[!ls() %in% c("ASVTABLE","my_asv_table","my_min_rel_abund", "my_minimum_detection", "outdirectory", "my_model", "my_output", "my_sample_data", "feature_aucs")])
feature_aucs = readRDS(file=paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/feature_aucs.rds"))
countMatrixByROCThreshold <- readRDS(file = paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/countMatrixByROCThreshold.rds"))
# allHumanASVs = readRDS("allHumanASVs.rds")
# allHumanASVs = apply(X = allHumanASVs, MARGIN = 2, FUN = function(x){x/sum(x)})
conc_matrix_list = get_concordance_matrices(perform_NBC_output = my_output,
sampleConcordanceMatrix=countMatrixByROCThreshold,
featureAUCsForConcordanceList=row.names(feature_aucs),
allHumanASVs = my_asv_table,
limit_of_detection = 0,
PWCtype = "proportion")
saveRDS(conc_matrix_list, file = paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/conc_matrix_list.rds"))
par(mfrow = c(1,1))
hist(as.matrix(conc_matrix_list[[1]]),
breaks = 20,
main=strwrap(paste0("Pairwise Concordance All A Against All H; ", length(row.names(feature_aucs)), " features; md=", my_minimum_detection), 25),
xlab = "Proportion of Concordant ASVs",
col = "darkgrey",
xlim = c(round(min(conc_matrix_list[[1]]), digits = 2), round(max(conc_matrix_list[[1]]), digits = 2)))
abline(v=conc_matrix_list[[1]]["MARS0043.F.16s", "MARS0022.F.16s"],
col=c("blue"), lty=2, lwd=3)
abline(v=conc_matrix_list[[1]]["MARS0033.F.16s", "MARS0034.F.16s"],
col=c("red"), lty=2, lwd=3)
# mean(conc_matrix_list[[1]])
# conc_matrix_list[[1]]["MARS0043.F.16s", "MARS0022.F.16s"]
outdirectory
conc_matrix_list
conc_matrix_list[[1]]
?get_concordance_matrices
# check for ASVs that have no concordant dyad
conc_matrix_list = readRDS(file = paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/conc_matrix_list.rds"))
featureAUCsForHist = readRDS(paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/featureAUCsForHist.rds"))
# choose AUC threshold for "top discriminatory taxa" to cover:
topASVsINPUT = featureAUCsForHist[featureAUCsForHist$feature_aucs > 0.6, ] # change threshold as you like
# topASVsINPUT = featureAUCsForHist # change threshold as you like
# this makes a list per asthma sample of how many healthy samples make that asthma-healthy dyad a pairwise concordant dyad (per taxa by row)
asthmaSamples = my_sample_data[,1][my_sample_data[,2] == "asthmatic"]
healthySamples = my_sample_data[,1][my_sample_data[,2] == "healthy"]
bigdat = matrix(nrow = length(featureAUCsForHist$ASV), ncol = length(asthmaSamples), data = 0, byrow = TRUE)
colnames(bigdat) = asthmaSamples
for (asthmaPatientX in asthmaSamples) {
for (healthyPatientX in healthySamples) {
# print(paste0(asthmaPatientX, ".", healthyPatientX))
# print(data.frame(conc_matrix_list[[2]][asthmaPatientX])[paste0(asthmaPatientX, ".", healthyPatientX)])
# dat = data.frame(conc_matrix_list[[2]][asthmaPatientX])[paste0(asthmaPatientX, ".", healthyPatientX)]
dat = rowSums(data.frame(conc_matrix_list[[2]][asthmaPatientX]))
bigdat[, asthmaPatientX] =dat
# dat[topASVsINPUT$ASV] == 0
rowstokeep=row.names(data.frame(conc_matrix_list[[2]][asthmaPatientX]))
}
}
data.frame(bigdat)
row.names(bigdat) = rowstokeep
topASVsINPUT$ASV[rowSums(bigdat[topASVsINPUT$ASV,]) == 0] # this will be a list of those that have no possibility of coverage
rowSums(ifelse(bigdat>0, 1, 0))
data.frame(bigdat)
row.names(bigdat) = rowstokeep
topASVsINPUT$ASV[rowSums(bigdat[topASVsINPUT$ASV,]) == 0] # this will be a list of those that have no possibility of coverage
rowSums(ifelse(bigdat>0, 1, 0))
bigdat
topASVsINPUT
bigdat[topASVsINPUT$ASV,]) == 0
bigdat[topASVsINPUT$ASV,]
rowSums(bigdat[topASVsINPUT$ASV,])
rowSums(bigdat[topASVsINPUT$ASV,]) == 0
topASVsINPUT$ASV
topASVsINPUT$ASV[rowSums(bigdat[topASVsINPUT$ASV,]) == 0]
rowSums(ifelse(bigdat>0, 1, 0))
data.frame(bigdat)
# data.frame(bigdat)
row.names(bigdat) = rowstokeep
topASVsINPUT$ASV[rowSums(bigdat[topASVsINPUT$ASV,]) == 0] # this will be a list of those that have no possibility of coverage
rowSums(ifelse(bigdat>0, 1, 0))
rm(list = ls()[!ls() %in% c("ASVTABLE","my_asv_table","my_min_rel_abund", "my_minimum_detection", "outdirectory", "my_model", "my_output", "my_sample_data", "feature_aucs")])
countMatrixByROCThreshold <- readRDS(file = paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/countMatrixByROCThreshold.rds"))
featureAUCsForHist = readRDS(paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/featureAUCsForHist.rds"))
# allHumanASVs = my_asv_table
# choose AUC threshold for "top discriminatory taxa" to cover:
topASVsINPUT = featureAUCsForHist[featureAUCsForHist$feature_aucs > 0.6, ] # change threshold as you like
# featureScoreMatrix <- my_output$score_per_feature_per_sample
# sample_table = data.frame(t(my_output$sample_by_sample))
bestPairsForCoverage=dyads_for_coverage(ASVs_to_cover = topASVsINPUT$ASV,  # list of names
perform_NBC_output = my_output,
sampleConcordanceMatrix=countMatrixByROCThreshold,
allHumanASVs = my_asv_table,
limit_of_detection=0,
case_class_name = "asthmatic",
ctrl_class_name = "healthy")
bestPairsForCoverage
unique(bestPairsForCoverage$Case)
unique(bestPairsForCoverage$Ctrl)
outdirectory
rm(list = ls()[!ls() %in% c("ASVTABLE","my_asv_table","my_min_rel_abund", "my_minimum_detection", "outdirectory", "my_model", "my_output", "my_sample_data", "feature_aucs")])
library(ggplot2)
#Functions for Plotting
make_plot_data = function(model,asv,spacing, plotMax) {
require(EnvStats)
plot_data = list()
xVals = seq(1E-5, plotMax, spacing/10)
my_mod = model[,asv]
pDetect = 1-my_mod["pNotDetected"]
yVals = dbeta(x = xVals, shape1 = my_mod[2], shape2 = my_mod[3])
yVals = yVals*pDetect
p = my_mod["pNotDetected"]
my_plot_data = data.frame(x = xVals, y = yVals, p)
return(my_plot_data)
}
frequency_histogram = function(x, pmax,plot_min){
spacing = (pmax - plot_min)/25
cbins = seq(plot_min, pmax, spacing)
lbins = cbins-0.5*spacing
rbins = cbins+0.5*spacing
output = data.frame(bins = cbins, lbins = lbins, rbins = rbins, "counts" = 0)
for(i in 1:nrow(output)) {
output[i,"counts"] = sum(x < output[i,"rbins"]) - sum(x <= output[i,"lbins"])
}
output$counts = (output$counts)/(sum(output$counts*spacing))
output = output[,c("bins","counts")]
return(output)
}
#Import Data
# nbc_output = readRDS(file = "MAP_md7_RAmd0_output.rds")
# nbc_model = readRDS(file = "MAP_md7_RAmd0_model.rds")
# nbc_sample_data = readRDS(file = "MAP_md7_RAmd0_sample_data.rds")
# asv_table = data.frame(readRDS(file = "MAP_md7_RAmd0_asv_table.rds"))
#Filter Down ASV Table
modeled_nbc_taxa = colnames(my_model[[1]])
asv_table = data.frame(my_asv_table)[modeled_nbc_taxa,]
#Extract Likelihoods
nbc_likelihoods = my_output$score_per_feature_per_sample
#Design Grid of Comparisons
asthma_patients = my_sample_data[my_sample_data[,2]=="asthmatic",1]
healthy_patients = my_sample_data[my_sample_data[,2]=="healthy",1]
grid_of_comparisons = data.frame(expand.grid(asthma_patients, healthy_patients, stringsAsFactors = FALSE))
grid_of_comparisons$Comp = paste0("Comp", seq(1:nrow(grid_of_comparisons)))
colnames(grid_of_comparisons) = c("asthma", "healthy", "comp")
row.names(grid_of_comparisons) = grid_of_comparisons$comp
majortextsize = 9
minortextsize = 7
asthmaColor = "#DE4968FF"
healthyColor = "#51127CFF"
#Model for plotting individual features
plot_list = list()
asvs = row.names(asv_table)
for (asv in asvs) {
##Classes are ordered as asthmatic, healthy, and overall
##Let's get model 1x1 done.
# for making every single asv plot:
AsthmaDF <- data.frame(t(asv_table[asv,asthma_patients]))
Asthmadat <- AsthmaDF[AsthmaDF[,asv]>0,]
HealthyDF <- data.frame(t(asv_table[asv,healthy_patients]))
Healthydat = HealthyDF[HealthyDF[,asv]>0,]
plotMax = max(round(max(c(Healthydat, Asthmadat))*1.2, digits = 2), 1e-3)
plotMin = min(min(c(Healthydat, Asthmadat))*0.8, 1e-5)
spacing = (plotMax - plotMin)/25
hdat = frequency_histogram(Healthydat,plotMax, plotMin)
hdat$Cohort = "Healthy"
adat = frequency_histogram(Asthmadat,plotMax, plotMin)
adat$Cohort = "Asthma"
asthma_plot_data = make_plot_data(my_model[[1]], asv = asv, plotMax = plotMax, spacing = spacing)
healthy_plot_data = make_plot_data(my_model[[2]],asv = asv, plotMax = plotMax, spacing = spacing)
p_nd = data.frame("bins" = c(-2*spacing, -1*spacing),
"counts" = c(unique(asthma_plot_data$p),
unique(healthy_plot_data$p)),
"Cohort" = c("Asthma", "Healthy"))
pDetectAsthma = 1-unique(asthma_plot_data$p)
pDetectHealthy = 1-unique(healthy_plot_data$p)
hdat$counts = hdat$counts*pDetectHealthy
adat$counts = adat$counts*pDetectAsthma
max_x = plotMax
ymax = max(c(asthma_plot_data$y, healthy_plot_data$y, hdat$counts, adat$counts))
hdat$counts = hdat$counts/ymax
adat$counts = adat$counts/ymax
dat = rbind(hdat, adat,p_nd)
feature_plot = ggplot() +
scale_color_manual(values = c(asthmaColor, healthyColor), guide = FALSE) +
scale_fill_manual(values = c(asthmaColor, healthyColor), "Cohort: ") +
theme_classic() +
scale_y_continuous(breaks = c(0.0, 0.25, 0.5, 0.75, 1.0),
labels = c("0", "0.25", "0.5", "0.75", "1.0"),
expand = c(0,0), limits = c(0, 1.2),
sec.axis = sec_axis(~.*ymax)) +
scale_x_continuous(breaks=seq(0, round(max_x, digits = 3), round(max_x/5, digits = 20)),
limits = c(-3*spacing, max_x, expand = c(0,0))) +
geom_col(mapping = aes(x = bins, y = counts, fill = Cohort), position = "identity", data = dat, alpha = 0.4) +
geom_line(aes(x = x, y = y/ymax, colour = "Asthma"), data = asthma_plot_data, size =0.8) +
geom_line(aes(x = x, y = y/ymax, colour = "Healthy"), data = healthy_plot_data, size = 0.8) +
geom_segment(aes(x = 0, y = 0, xend = 0, yend = 1.2), colour = "black", size = 0.8) +
ggtitle(asv) +
theme(
axis.title = element_blank(),
legend.title = element_text(size = majortextsize+4, face = "bold"),
legend.text = element_text(size = minortextsize+4, face = "bold"),
legend.position = "bottom",
legend.key.width = unit(0.2,"cm"),
axis.line = element_line(size = 0.8),
axis.ticks = element_line(size = 0.8),
plot.margin = unit(c(.1,0,0,0), "cm"),
plot.title = element_text(size = majortextsize, face = "bold"),
legend.margin = margin(0,0,0,0),
legend.box.margin = margin(0,0,0,0),
legend.background = element_rect(fill = NA, colour = NA)
)
# Donor Vertical lines
if (AsthmaDF["MARS0043.F.16s", asv] > 0) {
feature_plot <- feature_plot + geom_vline(xintercept = AsthmaDF["MARS0043.F.16s",], linetype="dashed",
color = asthmaColor, size=1.0)
} else {
feature_plot <- feature_plot + geom_vline(xintercept = -2*spacing, linetype="dashed",
color = asthmaColor, size=1.0)
}
if (HealthyDF["MARS0022.F.16s", asv] > 0) {
feature_plot <- feature_plot + geom_vline(xintercept = HealthyDF["MARS0022.F.16s", asv], linetype="dotted",
color = healthyColor, size=1.0)
} else {
feature_plot <- feature_plot + geom_vline(xintercept = -1*spacing, linetype="dotted",
color = healthyColor, size=1.0)
}
ggsave(filename = paste0(outdirectory, "feaure_distributions/", asv, ".pdf"), plot = feature_plot, device = "pdf", height = 3, width = 5, units = "in", useDingbats = FALSE)
}
feature_aucs
dim(feature_aucs)
dim()
dim(countMatrixByROCThreshold)
countMatrixByROCThreshold <- readRDS(file = paste0(outdirectory, ASVTABLE, "_MAP_md", my_minimum_detection, "_RAmd", my_min_rel_abund, "/countMatrixByROCThreshold.rds"))
dim(countMatrixByROCThreshold)
countMatrixByROCThreshold
dim(conc_matrix_list)
conc_matrix_list
devtools::document()
